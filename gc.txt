浅谈GC
Java主流虚拟机-HotSpot的GC实现机制
https://www.bbsmax.com/A/gVdnrOVldW/
https://www.bbsmax.com/A/B0zqm0Znzv/
https://zhidao.baidu.com/question/981904151505254899.html
https://blog.csdn.net/qq_36314960/article/details/79923581
https://www.oschina.net/news/54335/list_of_java_virtual_machines
https://blog.csdn.net/liyang_nash/article/details/78742623
https://blog.csdn.net/lsx2017/article/details/81273548
https://blog.csdn.net/Good_Luck_Li/article/details/89673926
https://blog.csdn.net/lpjishu/article/details/53260099
https://www.cnblogs.com/luozhiyun/p/10546608.html

https://github.com/zhouxiang-710/advancedTurtle.git

https://www.cnblogs.com/bluemapleman/p/9277064.html
https://www.cnblogs.com/wupeixuan/p/8670341.html
(java性能调优)
https://blog.csdn.net/qq_42894896/article/details/82256770
https://blog.csdn.net/Don_mingo/article/details/89316888
https://www.cnblogs.com/objJava/p/9035355.html
https://cloud.tencent.com/developer/article/1493048
https://cloud.tencent.com/developer/article/1328424
java性能调优工具
https://www.cnblogs.com/timlearn/p/4088626.html


面试题：“你能不能谈谈，java GC是在什么时候，对什么东西，做了什么事情？”
本部分来自面试题：“你能不能谈谈，java GC是在什么时候，对什么东西，做了什么事情？”

面试题目：

地球人都知道，Java有个东西叫垃圾收集器，它让创建的对象不需要像c/cpp那样delete、free掉，你能不能谈谈，GC是在什么时候，对什么东西，做了什么事情？

一.回答：什么时候?
1.系统空闲的时候。

分析：这种回答大约占30%，遇到的话一般我就会准备转向别的话题，譬如算法、譬如SSH看看能否发掘一些他擅长的其他方面。
2.系统自身决定，不可预测的时间/调用System.gc()的时候。

分析：这种回答大约占55%，大部分应届生都能回答到这个答案，起码不能算错误是吧，后续应当细分一下到底是语言表述导致答案太笼统，还是本身就只有这样一个模糊的认识。
3.能说出新生代、老年代结构，能提出minor gc/full gc

分析：到了这个层次，基本上能说对GC运作有概念上的了解，譬如看过《深入JVM虚拟机》之类的。这部分不足10%。
4.能说明minor gc/full gc的触发条件、OOM的触发条件，降低GC的调优的策略。

分析：列举一些我期望的回答：eden满了minor gc，升到老年代的对象大于老年代剩余空间full
gc，或者小于时被HandlePromotionFailure参数强制full
gc；gc与非gc时间耗时超过了GCTimeRatio的限制引发OOM，调优诸如通过NewRatio控制新生代老年代比例，通过
MaxTenuringThreshold控制进入老年前生存次数等……能回答道这个阶段就会给我带来比较高的期望了，当然面试的时候正常人都不会记得每个参数的拼写，我自己写这段话的时候也是翻过手册的。回答道这部分的小于2%。
总结：程序员不能具体控制时间，系统在不可预测的时间调用System.gc()函数的时候；当然可以通过调优，用NewRatio控制newObject和oldObject的比例，用MaxTenuringThreshold 控制进入oldObject的次数，使得oldObject 存储空间延迟达到full gc,从而使得计时器引发gc时间延迟OOM的时间延迟，以延长对象生存期。

二.回答：对什么东西？
1.不使用的对象。

分析：相当于没有回答，问题就是在问什么对象才是“不使用的对象”。大约占30%。
2.超出作用域的对象/引用计数为空的对象。

分析：这2个回答站了60%，相当高的比例，估计学校教java的时候老师就是这样教的。第一个回答没有解决我的疑问，gc到底怎么判断哪些对象在不在作用域的？至于引用计数来判断对象是否可收集的，我可以会补充一个下面这个例子让面试者分析一下obj1、obj2是否会被GC掉？
    class C{
         public Object x;
    }
    C obj1、obj2 = new C();
    obj1.x = obj2;
    obj2.x = obj1;
    obj1、obj2 = null;
3.从gc root开始搜索，搜索不到的对象。

分析：根对象查找、标记已经算是不错了，小于5%的人可以回答道这步，估计是引用计数的方式太“深入民心”了。基本可以得到这个问题全部分数。
PS：有面试者在这个问补充强引用、弱引用、软引用、幻影引用区别等，不是我想问的答案，但可以加分。
4.从root搜索不到，而且经过第一次标记、清理后，仍然没有复活的对象。

分析：我期待的答案。但是的确很少面试者会回答到这一点，所以在我心中回答道第3点我就给全部分数。
总结：超出了作用域或引用计数为空的对象；从gc root开始搜索找不到的对象，而且经过一次标记、清理，仍然没有复活的对象。

三.回答：做什么？
1.删除不使用的对象，腾出内存空间。

分析：同问题2第一点。40%。

2.补充一些诸如停止其他线程执行、运行finalize等的说明。

分析：起码把问题具体化了一些，如果像答案1那样我很难在回答中找到话题继续展开，大约占40%的人。
补充一点题外话，面试时我最怕遇到的回答就是“这个问题我说不上来，但是遇到的时候我上网搜一下能做出来”。做程序开发确实不是去锻炼茴香豆的“茴”有几种写法，不死记硬背我同意，我不会纠语法、单词，但是多少你说个思路呀，要直接回答一个上网搜，我完全没办法从中获取可以评价应聘者的信息，也很难从回答中继续发掘话题展开讨论。建议大家尽量回答引向自己熟悉的，可讨论的领域，展现给面试官最擅长的一面。
3.能说出诸如新生代做的是复制清理、from survivor、to survivor是干啥用的、老年代做的是标记清理、标记清理后碎片要不要整理、复制清理和标记清理有有什么优劣势等。

分析：也是看过《深入JVM虚拟机》的基本都能回答道这个程度，其实到这个程度我已经比较期待了。同样小于10%。
4.除了3外，还能讲清楚串行、并行（整理/不整理碎片）、CMS等搜集器可作用的年代、特点、优劣势，并且能说明控制/调整收集器选择的方式。

分析：同上面2个问题的第四点。

总结：删除不使用的对象，回收内存空间；运行默认的finalize,当然程序员想立刻调用就用dipose调用以释放资源如文件句柄，JVM用from survivor、to survivor对它进行标记清理，对象序列化后也可以使它复活。

千万不要说网上google下，就算说也要说出自己以前遇到这样的问题是怎么处理的，对这个知识有什么认识想法，然后可以反问下考官，这样可以不让技术型的考官为如何继续话题而对你无语，呵呵。